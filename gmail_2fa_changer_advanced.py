#!/usr/bin/env python3
"""
Gmail 2FA Changer Advanced - Phi√™n b·∫£n n√¢ng cao v·ªõi x·ª≠ l√Ω captcha v√† proxy
Author: Assistant
Version: 2.0
"""

import pandas as pd
import time
import random
import json
import os
import requests
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException
import logging
from datetime import datetime
import threading
from queue import Queue
import pickle

class Gmail2FAChangerAdvanced:
    def __init__(self, input_file, output_file="updated_accounts_advanced.csv", 
                 use_proxy=False, proxy_list=None, max_workers=3):
        self.input_file = input_file
        self.output_file = output_file
        self.use_proxy = use_proxy
        self.proxy_list = proxy_list or []
        self.max_workers = max_workers
        self.driver = None
        self.session_cookies = {}
        self.setup_logging()
        
    def setup_logging(self):
        """Thi·∫øt l·∫≠p logging n√¢ng cao"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - [%(threadName)s] %(message)s',
            handlers=[
                logging.FileHandler('gmail_2fa_changer_advanced.log'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
        
    def setup_driver(self, proxy=None):
        """Thi·∫øt l·∫≠p Chrome driver v·ªõi options n√¢ng cao"""
        chrome_options = Options()
        
        # Basic options
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        
        # Advanced anti-detection
        chrome_options.add_argument("--disable-web-security")
        chrome_options.add_argument("--allow-running-insecure-content")
        chrome_options.add_argument("--disable-features=VizDisplayCompositor")
        chrome_options.add_argument("--disable-extensions")
        chrome_options.add_argument("--disable-plugins")
        chrome_options.add_argument("--disable-images")
        chrome_options.add_argument("--disable-javascript")
        chrome_options.add_argument("--disable-default-apps")
        
        # User agent rotation
        user_agents = [
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
        ]
        chrome_options.add_argument(f"--user-agent={random.choice(user_agents)}")
        
        # Proxy support
        if proxy and self.use_proxy:
            chrome_options.add_argument(f'--proxy-server={proxy}')
            
        # Window size
        chrome_options.add_argument("--window-size=1920,1080")
        
        self.driver = webdriver.Chrome(options=chrome_options)
        self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        
        # Additional stealth
        self.driver.execute_cdp_cmd('Network.setUserAgentOverride', {
            "userAgent": random.choice(user_agents)
        })
        
    def load_session_cookies(self, email):
        """Load session cookies n·∫øu c√≥"""
        cookie_file = f"cookies_{email.replace('@', '_').replace('.', '_')}.pkl"
        if os.path.exists(cookie_file):
            try:
                with open(cookie_file, 'rb') as f:
                    cookies = pickle.load(f)
                for cookie in cookies:
                    self.driver.add_cookie(cookie)
                self.logger.info(f"ƒê√£ load cookies cho {email}")
                return True
            except Exception as e:
                self.logger.warning(f"Kh√¥ng th·ªÉ load cookies cho {email}: {e}")
        return False
        
    def save_session_cookies(self, email):
        """L∆∞u session cookies"""
        try:
            cookies = self.driver.get_cookies()
            cookie_file = f"cookies_{email.replace('@', '_').replace('.', '_')}.pkl"
            with open(cookie_file, 'wb') as f:
                pickle.dump(cookies, f)
            self.logger.info(f"ƒê√£ l∆∞u cookies cho {email}")
        except Exception as e:
            self.logger.warning(f"Kh√¥ng th·ªÉ l∆∞u cookies cho {email}: {e}")
            
    def solve_captcha(self):
        """X·ª≠ l√Ω captcha (c·∫ßn manual intervention)"""
        try:
            # T√¨m captcha element
            captcha_element = WebDriverWait(self.driver, 5).until(
                EC.presence_of_element_located((By.ID, "captchaimg"))
            )
            
            self.logger.warning("Ph√°t hi·ªán CAPTCHA! C·∫ßn x·ª≠ l√Ω manual")
            
            # Hi·ªÉn th·ªã captcha cho user
            captcha_src = captcha_element.get_attribute("src")
            print(f"\nüîí CAPTCHA detected: {captcha_src}")
            print("Vui l√≤ng m·ªü link tr√™n v√† gi·∫£i captcha, sau ƒë√≥ nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
            input()
            
            return True
        except TimeoutException:
            return False
            
    def handle_security_challenge(self):
        """X·ª≠ l√Ω c√°c th·ª≠ th√°ch b·∫£o m·∫≠t"""
        try:
            # Ki·ªÉm tra c√°c lo·∫°i challenge
            challenge_types = [
                "//div[contains(text(), 'Verify it's you')]",
                "//div[contains(text(), 'Security check')]",
                "//div[contains(text(), 'Unusual activity')]"
            ]
            
            for xpath in challenge_types:
                try:
                    challenge = WebDriverWait(self.driver, 3).until(
                        EC.presence_of_element_located((By.XPATH, xpath))
                    )
                    self.logger.warning("Ph√°t hi·ªán security challenge!")
                    print("\nüîê Security challenge detected!")
                    print("Vui l√≤ng x·ª≠ l√Ω manual v√† nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                    input()
                    return True
                except TimeoutException:
                    continue
                    
            return False
        except Exception as e:
            self.logger.error(f"L·ªói x·ª≠ l√Ω security challenge: {e}")
            return False
            
    def login_gmail_advanced(self, email, password):
        """ƒêƒÉng nh·∫≠p Gmail v·ªõi x·ª≠ l√Ω n√¢ng cao"""
        try:
            self.logger.info(f"ƒêang ƒëƒÉng nh·∫≠p: {email}")
            
            # Truy c·∫≠p trang ƒëƒÉng nh·∫≠p
            self.driver.get("https://accounts.google.com/signin")
            self.random_delay(3, 6)
            
            # Load cookies n·∫øu c√≥
            self.load_session_cookies(email)
            
            # Refresh page sau khi load cookies
            self.driver.refresh()
            self.random_delay(2, 4)
            
            # Ki·ªÉm tra xem ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a
            if "myaccount.google.com" in self.driver.current_url:
                self.logger.info(f"ƒê√£ ƒëƒÉng nh·∫≠p s·∫µn cho {email}")
                return "success"
                
            # Nh·∫≠p email
            email_input = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.NAME, "identifier"))
            )
            self.type_like_human(email_input, email)
            
            # Click Next
            next_button = self.driver.find_element(By.ID, "identifierNext")
            next_button.click()
            self.random_delay(2, 4)
            
            # X·ª≠ l√Ω captcha n·∫øu c√≥
            if self.solve_captcha():
                self.random_delay(3, 6)
                
            # Nh·∫≠p password
            password_input = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.NAME, "password"))
            )
            self.type_like_human(password_input, password)
            
            # Click Next
            password_next = self.driver.find_element(By.ID, "passwordNext")
            password_next.click()
            self.random_delay(3, 6)
            
            # X·ª≠ l√Ω security challenge
            if self.handle_security_challenge():
                self.random_delay(3, 6)
                
            # Ki·ªÉm tra 2FA
            try:
                totp_input = WebDriverWait(self.driver, 5).until(
                    EC.presence_of_element_located((By.NAME, "totpPin"))
                )
                self.logger.info("C·∫ßn nh·∫≠p 2FA")
                return "need_2fa"
            except TimeoutException:
                # Ki·ªÉm tra ƒëƒÉng nh·∫≠p th√†nh c√¥ng
                if "myaccount.google.com" in self.driver.current_url or "mail.google.com" in self.driver.current_url:
                    self.logger.info("ƒêƒÉng nh·∫≠p th√†nh c√¥ng")
                    self.save_session_cookies(email)
                    return "success"
                else:
                    self.logger.warning("Kh√¥ng th·ªÉ x√°c ƒë·ªãnh tr·∫°ng th√°i ƒëƒÉng nh·∫≠p")
                    return "unknown"
                    
        except Exception as e:
            self.logger.error(f"L·ªói ƒëƒÉng nh·∫≠p {email}: {e}")
            return "error"
            
    def type_like_human(self, element, text):
        """G√µ text nh∆∞ ng∆∞·ªùi th·∫≠t"""
        element.clear()
        for char in text:
            element.send_keys(char)
            time.sleep(random.uniform(0.05, 0.15))
            
    def random_delay(self, min_seconds=2, max_seconds=5):
        """Delay ng·∫´u nhi√™n"""
        delay = random.uniform(min_seconds, max_seconds)
        time.sleep(delay)
        
    def process_account_advanced(self, email, password, current_2fa):
        """X·ª≠ l√Ω t√†i kho·∫£n v·ªõi logic n√¢ng cao"""
        try:
            # Setup driver v·ªõi proxy ng·∫´u nhi√™n
            proxy = random.choice(self.proxy_list) if self.proxy_list else None
            self.setup_driver(proxy)
            
            # ƒêƒÉng nh·∫≠p
            login_status = self.login_gmail_advanced(email, password)
            
            if login_status == "need_2fa":
                # Nh·∫≠p 2FA
                if not self.enter_current_2fa(current_2fa):
                    return {"status": "error", "message": "Kh√¥ng th·ªÉ nh·∫≠p 2FA"}
                    
            elif login_status == "error":
                return {"status": "error", "message": "L·ªói ƒëƒÉng nh·∫≠p"}
                
            # ƒêi·ªÅu h∆∞·ªõng v√† thay ƒë·ªïi 2FA
            if not self.navigate_to_security_settings():
                return {"status": "error", "message": "Kh√¥ng th·ªÉ truy c·∫≠p security settings"}
                
            new_2fa = self.change_2fa()
            
            if new_2fa == "need_password":
                return {"status": "need_password", "message": "C·∫ßn password ƒë·ªÉ x√°c nh·∫≠n"}
            elif new_2fa:
                return {"status": "success", "new_2fa": new_2fa}
            else:
                return {"status": "error", "message": "Kh√¥ng th·ªÉ thay ƒë·ªïi 2FA"}
                
        except Exception as e:
            self.logger.error(f"L·ªói x·ª≠ l√Ω {email}: {e}")
            return {"status": "error", "message": str(e)}
        finally:
            if self.driver:
                self.driver.quit()
                
    def worker(self, queue, results):
        """Worker thread ƒë·ªÉ x·ª≠ l√Ω t√†i kho·∫£n"""
        while True:
            try:
                account_data = queue.get_nowait()
            except:
                break
                
            email = account_data['email']
            password = account_data['password']
            current_2fa = account_data['current_2fa']
            
            self.logger.info(f"Worker {threading.current_thread().name} x·ª≠ l√Ω: {email}")
            
            result = self.process_account_advanced(email, password, current_2fa)
            
            result_data = {
                'email': email,
                'password': password,
                'old_2fa': current_2fa,
                'new_2fa': result.get('new_2fa', ''),
                'status': result['status'],
                'message': result.get('message', ''),
                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'worker': threading.current_thread().name
            }
            
            results.append(result_data)
            queue.task_done()
            
    def run_parallel(self):
        """Ch·∫°y script v·ªõi multi-threading"""
        try:
            # Load accounts
            accounts_df = self.load_accounts()
            
            # T·∫°o queue v√† results
            queue = Queue()
            results = []
            
            # Th√™m accounts v√†o queue
            for _, row in accounts_df.iterrows():
                queue.put({
                    'email': row['email'],
                    'password': row['password'],
                    'current_2fa': row['current_2fa']
                })
                
            # T·∫°o workers
            threads = []
            for i in range(min(self.max_workers, len(accounts_df))):
                thread = threading.Thread(
                    target=self.worker,
                    args=(queue, results),
                    name=f"Worker-{i+1}"
                )
                thread.start()
                threads.append(thread)
                
            # ƒê·ª£i t·∫•t c·∫£ ho√†n th√†nh
            queue.join()
            for thread in threads:
                thread.join()
                
            # L∆∞u k·∫øt qu·∫£
            final_df = pd.DataFrame(results)
            final_df.to_csv(self.output_file, index=False)
            
            self.logger.info(f"Ho√†n th√†nh! ƒê√£ x·ª≠ l√Ω {len(results)} t√†i kho·∫£n")
            
        except Exception as e:
            self.logger.error(f"L·ªói trong qu√° tr√¨nh ch·∫°y: {e}")
            
    def load_accounts(self):
        """Load danh s√°ch t√†i kho·∫£n"""
        try:
            if self.input_file.endswith('.csv'):
                df = pd.read_csv(self.input_file)
            elif self.input_file.endswith('.xlsx'):
                df = pd.read_excel(self.input_file)
            else:
                raise ValueError("File kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£")
                
            required_columns = ['email', 'password', 'current_2fa']
            missing_columns = [col for col in required_columns if col not in df.columns]
            
            if missing_columns:
                raise ValueError(f"Thi·∫øu c√°c c·ªôt: {missing_columns}")
                
            self.logger.info(f"ƒê√£ load {len(df)} t√†i kho·∫£n")
            return df
            
        except Exception as e:
            self.logger.error(f"L·ªói load file: {e}")
            raise
            
    # C√°c method kh√°c gi·ªØ nguy√™n nh∆∞ phi√™n b·∫£n c∆° b·∫£n
    def enter_current_2fa(self, current_2fa):
        """Nh·∫≠p 2FA hi·ªán t·∫°i"""
        try:
            totp_input = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.NAME, "totpPin"))
            )
            self.type_like_human(totp_input, current_2fa)
            
            verify_button = self.driver.find_element(By.ID, "totpNext")
            verify_button.click()
            self.random_delay(3, 6)
            
            return True
        except Exception as e:
            self.logger.error(f"L·ªói nh·∫≠p 2FA: {e}")
            return False
            
    def navigate_to_security_settings(self):
        """ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn security settings"""
        try:
            self.driver.get("https://myaccount.google.com/security")
            self.random_delay(3, 5)
            
            two_step_link = WebDriverWait(self.driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, "//a[contains(text(), '2-Step Verification')]"))
            )
            two_step_link.click()
            self.random_delay(2, 4)
            
            return True
        except Exception as e:
            self.logger.error(f"L·ªói ƒëi·ªÅu h∆∞·ªõng: {e}")
            return False
            
    def change_2fa(self):
        """Thay ƒë·ªïi 2FA"""
        try:
            try:
                change_app_button = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Change app') or contains(text(), 'Get backup codes')]"))
                )
                change_app_button.click()
                self.random_delay(2, 4)
            except TimeoutException:
                self.logger.info("Kh√¥ng t√¨m th·∫•y n√∫t thay ƒë·ªïi 2FA")
                return None
                
            try:
                password_input = WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.NAME, "password"))
                )
                self.logger.info("C·∫ßn password ƒë·ªÉ x√°c nh·∫≠n")
                return "need_password"
            except TimeoutException:
                pass
                
            try:
                backup_codes_element = WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.CLASS_NAME, "backup-codes"))
                )
                backup_codes = backup_codes_element.text
                self.logger.info("ƒê√£ l·∫•y backup codes m·ªõi")
                return backup_codes
            except TimeoutException:
                self.logger.warning("Kh√¥ng t√¨m th·∫•y backup codes")
                return None
                
        except Exception as e:
            self.logger.error(f"L·ªói thay ƒë·ªïi 2FA: {e}")
            return None

def main():
    """H√†m main"""
    print("=== Gmail 2FA Changer Advanced ===")
    print("‚ö†Ô∏è  Phi√™n b·∫£n n√¢ng cao v·ªõi multi-threading v√† proxy support")
    print()
    
    # Nh·∫≠p th√¥ng tin
    input_file = input("Nh·∫≠p ƒë∆∞·ªùng d·∫´n file Excel/CSV: ").strip()
    
    if not os.path.exists(input_file):
        print("‚ùå File kh√¥ng t·ªìn t·∫°i!")
        return
        
    output_file = input("Nh·∫≠p t√™n file output (m·∫∑c ƒë·ªãnh: updated_accounts_advanced.csv): ").strip()
    if not output_file:
        output_file = "updated_accounts_advanced.csv"
        
    # H·ªèi v·ªÅ proxy
    use_proxy = input("S·ª≠ d·ª•ng proxy? (y/N): ").strip().lower() == 'y'
    proxy_list = []
    
    if use_proxy:
        proxy_file = input("Nh·∫≠p ƒë∆∞·ªùng d·∫´n file proxy (m·ªói d√≤ng 1 proxy): ").strip()
        if os.path.exists(proxy_file):
            with open(proxy_file, 'r') as f:
                proxy_list = [line.strip() for line in f if line.strip()]
            print(f"ƒê√£ load {len(proxy_list)} proxy")
        else:
            print("‚ùå File proxy kh√¥ng t·ªìn t·∫°i!")
            return
            
    # S·ªë worker threads
    max_workers = input("S·ªë worker threads (m·∫∑c ƒë·ªãnh: 3): ").strip()
    max_workers = int(max_workers) if max_workers.isdigit() else 3
    
    # X√°c nh·∫≠n
    print(f"\nüìÅ Input: {input_file}")
    print(f"üìÅ Output: {output_file}")
    print(f"üîß Workers: {max_workers}")
    print(f"üåê Proxy: {'C√≥' if use_proxy else 'Kh√¥ng'}")
    
    confirm = input("\nB·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c? (y/N): ").strip().lower()
    
    if confirm != 'y':
        print("‚ùå ƒê√£ h·ªßy!")
        return
        
    # Ch·∫°y script
    changer = Gmail2FAChangerAdvanced(
        input_file=input_file,
        output_file=output_file,
        use_proxy=use_proxy,
        proxy_list=proxy_list,
        max_workers=max_workers
    )
    
    try:
        changer.run_parallel()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  ƒê√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng")
    except Exception as e:
        print(f"\n‚ùå L·ªói: {e}")

if __name__ == "__main__":
    main() 